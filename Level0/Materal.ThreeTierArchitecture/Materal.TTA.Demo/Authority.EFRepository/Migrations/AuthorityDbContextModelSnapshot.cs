// <auto-generated />
using System;
using Authority.EFRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Authority.EFRepository.Migrations
{
    [DbContext(typeof(AuthorityDbContext))]
    partial class AuthorityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Authority.Domain.APIAuthority", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentID");

                    b.Property<string>("Remark")
                        .IsRequired();

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("APIAuthority");
                });

            modelBuilder.Entity("Authority.Domain.ActionAuthority", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionGroupCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .IsRequired();

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("ActionAuthority");
                });

            modelBuilder.Entity("Authority.Domain.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentID");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Authority.Domain.RoleAPIAuthority", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("APIAuthorityID");

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("APIAuthorityID");

                    b.HasIndex("RoleID");

                    b.ToTable("RoleAPIAuthority");
                });

            modelBuilder.Entity("Authority.Domain.RoleActionAuthority", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActionAuthorityID");

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("ActionAuthorityID");

                    b.HasIndex("RoleID");

                    b.ToTable("RoleActionAuthority");
                });

            modelBuilder.Entity("Authority.Domain.RoleWebMenuAuthority", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid>("WebMenuAuthorityID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("WebMenuAuthorityID");

                    b.ToTable("RoleWebMenuAuthority");
                });

            modelBuilder.Entity("Authority.Domain.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Authority.Domain.UserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Authority.Domain.WebMenuAuthority", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentID");

                    b.Property<string>("Remark")
                        .IsRequired();

                    b.Property<string>("Style");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("WebMenuAuthority");
                });

            modelBuilder.Entity("Authority.Domain.APIAuthority", b =>
                {
                    b.HasOne("Authority.Domain.APIAuthority", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("Authority.Domain.Role", b =>
                {
                    b.HasOne("Authority.Domain.Role", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("Authority.Domain.RoleAPIAuthority", b =>
                {
                    b.HasOne("Authority.Domain.APIAuthority", "APIAuthority")
                        .WithMany("RoleAPIAuthorities")
                        .HasForeignKey("APIAuthorityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authority.Domain.Role", "Role")
                        .WithMany("RoleAPIAuthorities")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authority.Domain.RoleActionAuthority", b =>
                {
                    b.HasOne("Authority.Domain.ActionAuthority", "ActionAuthority")
                        .WithMany("RoleActionAuthorities")
                        .HasForeignKey("ActionAuthorityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authority.Domain.Role", "Role")
                        .WithMany("RoleActionAuthorities")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authority.Domain.RoleWebMenuAuthority", b =>
                {
                    b.HasOne("Authority.Domain.Role", "Role")
                        .WithMany("RoleWebMenuAuthorities")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authority.Domain.WebMenuAuthority", "WebMenuAuthority")
                        .WithMany("RoleWebMenuAuthorities")
                        .HasForeignKey("WebMenuAuthorityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authority.Domain.UserRole", b =>
                {
                    b.HasOne("Authority.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authority.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authority.Domain.WebMenuAuthority", b =>
                {
                    b.HasOne("Authority.Domain.WebMenuAuthority", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentID");
                });
#pragma warning restore 612, 618
        }
    }
}
