@using Materal.BaseCore.DataTransmitModel;
@using Materal.BaseCore.PresentationModel;
@using RC.Core.HttpClient;

@typeparam TAddRequestModel where TAddRequestModel : class, IAddRequestModel, new()
@typeparam TEditRequestModel where TEditRequestModel : class, IEditRequestModel, new()
@typeparam TQueryRequestModel where TQueryRequestModel : IQueryRequestModel, new()
@typeparam TDTO where TDTO : class, IDTO, new()
@typeparam TListDTO where TListDTO : class, IListDTO, new()
@typeparam THttpClient where THttpClient : HttpClientBase<TAddRequestModel, TEditRequestModel, TQueryRequestModel, TDTO, TListDTO>

@inject IMessageService _message;
@inject NavigationManager _navigation;
@inject THttpClient MainHttpClient;

@code {
    [Parameter]
    public Guid? ID { get; set; }
    protected bool IsAdd => ID == null;
    protected bool Loading = false;
    protected TAddRequestModel AddModel = new();
    protected TEditRequestModel EditModel = new();
    protected string ListName { get; set; } = "BaseList";
    protected virtual void BeforeAdd() { }
    protected virtual void BeforeEdit() { }
    protected virtual void Add()
    {
        Loading = true;
        HttpHandler.Handler(async () =>
        {
            BeforeAdd();
            await MainHttpClient.AddAsync(AddModel);
            _navigation.NavigateTo($"./{ListName}");
        }, () =>
        {
            Loading = false;
            StateHasChanged();
        });
    }
    protected virtual void Edit()
    {
        Loading = true;
        HttpHandler.Handler(async () =>
        {
            BeforeEdit();
            await MainHttpClient.EditAsync(EditModel);
            _navigation.NavigateTo($"./{ListName}");
        }, () =>
        {
            Loading = false;
            StateHasChanged();
        });
    }
    protected virtual void Reload()
    {
        if (ID == null)
        {
            AddModel = new();
            StateHasChanged();
            return;
        }
        Loading = true;
        HttpHandler.Handler(async () =>
        {
            TDTO? userInfo = await MainHttpClient.GetInfoAsync(ID.Value);
            if (userInfo != null)
            {
                userInfo.CopyProperties(EditModel);
            }
        }, () =>
        {
            Loading = false;
            StateHasChanged();
        });
    }
}