@using Materal.Gateway.OcelotExtension.ConfigModel;
@using Materal.Gateway.OcelotExtension.Services;
@inject IOcelotConfigService _ocelotConfigService;
@inject IMessageService _message;
@typeparam T

@if (Model != null && FormTemplate != null)
{
    <Form Loading="_loading" Model="@Model" LabelColSpan="@LabelColSpan" WrapperColSpan="@WrapperColSpan" OnFinish="OnFinish">
        @FormTemplate(@context)
        <FormItem WrapperColOffset="@LabelColSpan" WrapperColSpan="@WrapperColSpan">
            <Button Type="@ButtonType.Primary" Block HtmlType="submit">保存</Button>
        </FormItem>
    </Form>
}

@code {
    [Parameter]
    public int LabelColSpan { get; set; } = 3;
    [Parameter]
    public int WrapperColSpan { get; set; } = 6;
    [Parameter]
    public T? Model { get; set; }
    [Parameter]
    public Action<OcelotConfigModel>? InitData { get; set; }
    [Parameter]
    public Action<OcelotConfigModel>? SaveData { get; set; }
    [Parameter]
    public RenderFragment<T>? FormTemplate { get; set; }
    private bool _loading = false;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ocelotConfigService.Reload();
            InitData?.Invoke(_ocelotConfigService.OcelotConfig);
        }
        base.OnAfterRender(firstRender);
    }
    private void OnFinish(EditContext context)
    {
        _loading = true;
        SaveData?.Invoke(_ocelotConfigService.OcelotConfig);
        try
        {
            _ocelotConfigService.Save();
            _message.Success("保存成功");
        }
        catch (Exception ex)
        {
            _message.Error($"保存失败:{ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }
}
