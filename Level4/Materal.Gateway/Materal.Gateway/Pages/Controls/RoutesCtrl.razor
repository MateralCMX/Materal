@page "/Setting/Routes"
@using System.Linq.Expressions;
@using AntDesign.Internal;
@using Materal.Gateway.Model;
@using Materal.Gateway.OcelotExtension.ConfigModel;
@using Materal.Gateway.OcelotExtension.Services;
@using Materal.Gateway.OcelotExtension.Model;
@using Materal.Gateway.Pages.Controls.Routes

<PageTitle>路由-Materal.Gateway</PageTitle>
@inject IOcelotConfigService _ocelotConfigService;
@inject IMessageService _message;
@inject NavigationManager _navigation;

<Space Direction="DirectionVHType.Vertical" Style="width:100%;">
    <SpaceItem>
        <Form @ref="_form" Model="_searchModel" OnFinish="Reload">
            <Row Gutter="24">
                <GridCol Span="6">
                    <FormItem Label="地址">
                        <Input @bind-Value="context.Url" />
                    </FormItem>
                </GridCol>
                <GridCol Span="6">
                    <FormItem Label="服务名称">
                        <Input @bind-Value="context.ServiceName" />
                    </FormItem>
                </GridCol>
                <GridCol Span="6">
                    <FormItem Label="Swagger">
                        <Input @bind-Value="context.SwaggerKey" />
                    </FormItem>
                </GridCol>
                <GridCol Span="6">
                    <FormItem Label="缓存">
                        <Select Mode="default" DataSource="_queryUseModel" LabelName="Key" ValueName="Value" @bind-Value="context.EnableCache" />
                    </FormItem>
                </GridCol>
            </Row>
            <Row>
                <GridCol Span="24" Style="text-align:right;">
                    <ButtonGroup>
                        <Tooltip Title="查询">
                            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Search" HtmlType="submit"></Button>
                        </Tooltip>
                        <Tooltip Title="重置">
                            <Button Icon="@IconType.Outline.Retweet" OnClick="()=>{_form?.Reset();}"></Button>
                        </Tooltip>
                        <Tooltip Title="添加">
                            <Button Icon="@IconType.Outline.FileAdd" OnClick="Add"></Button>
                        </Tooltip>
                    </ButtonGroup>
                </GridCol>
            </Row>
        </Form>
    </SpaceItem>
    <SpaceItem>
        <AntList DataSource="_data">
            <ChildContent Context="item">
                <ListItem>
                    <div draggable="true" @ondrop="e => OnDrop(e, item)" @ondragstart="e => OnDragStart(e, item)" ondragover="event.preventDefault()">
                        <RouteItemCtrl Model="@item" Edit="Edit" Delete="Delete"></RouteItemCtrl>
                    </div>
                </ListItem>
            </ChildContent>
        </AntList>
    </SpaceItem>
</Space>

@code {
    private IForm? _form;
    private RouteConfigModel? _dragging;
    private List<RouteConfigModel> _data = new();
    private QueryRouteConfigModel _searchModel = new();
    private List<SelectKeyValueModel<bool>> _queryUseModel = new()
    {
        new SelectKeyValueModel<bool>("所有", null),
        new SelectKeyValueModel<bool>("启用", true),
        new SelectKeyValueModel<bool>("禁用", false)
    };
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Reload();
        }
        base.OnAfterRender(firstRender);
    }
    private void Reload()
    {
        _ocelotConfigService.Reload();
        Expression<Func<RouteConfigModel, bool>> expression = m => true;
        if (!string.IsNullOrWhiteSpace(_searchModel.Url))
        {
            expression = expression.And(m => m.UpstreamPathTemplate.Contains(_searchModel.Url) || m.DownstreamPathTemplate.Contains(_searchModel.Url));
        }
        if (!string.IsNullOrWhiteSpace(_searchModel.SwaggerKey))
        {
            expression = expression.And(m => !string.IsNullOrWhiteSpace(m.SwaggerKey) && m.SwaggerKey.Contains(_searchModel.SwaggerKey));
        }
        if (!string.IsNullOrWhiteSpace(_searchModel.ServiceName))
        {
            expression = expression.And(m => !string.IsNullOrWhiteSpace(m.ServiceName) && m.ServiceName.Contains(_searchModel.ServiceName));
        }
        if (_searchModel.EnableCache != null)
        {
            if (_searchModel.EnableCache.Value)
            {
                expression = expression.And(m => m.FileCacheOptions != null);
            }
            else
            {
                expression = expression.And(m => m.FileCacheOptions == null);
            }
        }
        _data = _ocelotConfigService.OcelotConfig.Routes.Where(expression.Compile()).ToList();
        StateHasChanged();
    }
    private void Add() => _navigation.NavigateTo("./Setting/Routes/Route");
    private void Edit(Guid id) => _navigation.NavigateTo($"./Setting/Routes/Route/{id}");
    private void Delete(RouteConfigModel model)
    {
        _ocelotConfigService.OcelotConfig.Routes.Remove(model);
        _ocelotConfigService.Save();
        Reload();
    }
    private void OnDrop(DragEventArgs e, RouteConfigModel model)
    {
        if (_dragging == null) return;
        int index = _ocelotConfigService.OcelotConfig.Routes.IndexOf(model);
        _ocelotConfigService.OcelotConfig.Routes.Remove(_dragging);
        _ocelotConfigService.OcelotConfig.Routes.Insert(index, _dragging);
        _ocelotConfigService.Save();
        Reload();
        //int index = _data.IndexOf(model);
        //_data.Remove(_dragging);
        //_data.Insert(index, _dragging);
        //_dragging = null;
        //StateHasChanged();
    }
    private void OnDragStart(DragEventArgs e, RouteConfigModel model)
    {
        e.DataTransfer.DropEffect = "move";
        e.DataTransfer.EffectAllowed = "move";
        _dragging = model;
    }
}
