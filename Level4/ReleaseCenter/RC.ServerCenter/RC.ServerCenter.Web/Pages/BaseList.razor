@using AntDesign.Internal;
@using Materal.BaseCore.DataTransmitModel;
@using Materal.BaseCore.PresentationModel;
@using Materal.Utils.Model;
@using RC.Core.HttpClient;

@typeparam TAddRequestModel where TAddRequestModel : class, IAddRequestModel, new()
@typeparam TEditRequestModel where TEditRequestModel : class, IEditRequestModel, new()
@typeparam TQueryRequestModel where TQueryRequestModel : IQueryRequestModel, new()
@typeparam TDTO where TDTO : class, IDTO, new()
@typeparam TListDTO where TListDTO : class, IListDTO, new()
@typeparam THttpClient where THttpClient : HttpClientBase<TAddRequestModel, TEditRequestModel, TQueryRequestModel, TDTO, TListDTO>

@inject NavigationManager _navigation;
@inject THttpClient _httpClient;

@code {
    protected IForm? SearchForm;
    protected bool SearchLoading = false;
    protected List<TListDTO> TableData = new();
    protected TQueryRequestModel SearchModel = new();
    protected PageModel PageInfo = new()
        {
            PageIndex = 1,
            PageSize = 10
        };
    protected virtual bool CanReload { get; } = true;
    protected virtual void Add() => _navigation.NavigateTo($"./{GetDetailPageName}");
    protected virtual void Edit(Guid id) => _navigation.NavigateTo($"./{GetDetailPageName}/{id}");
    protected virtual void Delete(Guid id)
    {
        SearchLoading = true;
        HttpHandler.Handler(async () =>
        {
            await _httpClient.DeleteAsync(id);
            Reload();
        });
    }
    protected virtual void Reload() => ReloadByPageIndex(1);
    protected virtual void ReloadByPageIndex(int index)
    {
        string typeName = GetType().Name;
        if (!_navigation.Uri.Contains($"/{typeName}")) return;
        SearchLoading = true;
        HttpHandler.Handler(async () =>
        {
            while (!CanReload) { await Task.Delay(500); }
            SearchModel.PageIndex = index;
            SearchModel.PageSize = PageInfo.PageSize;
            (List<TListDTO>? data, PageModel pageInfo) = await _httpClient.GetListAsync(SearchModel);
            if (data != null)
            {
                TableData = data;
            }
            PageInfo.PageIndex = pageInfo.PageIndex;
            PageInfo.PageSize = pageInfo.PageSize;
            PageInfo.DataCount = pageInfo.DataCount;
        }, () =>
        {
            SearchLoading = false;
            StateHasChanged();
        });
    }
    protected virtual string GetDetailPageName => "Base";
    protected virtual void AfterResetSearchForm() { }
    protected virtual void ResetSearchForm()
    {
        SearchForm?.Reset();
        AfterResetSearchForm();
    }
}
