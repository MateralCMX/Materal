@using Authority.GrpcModel
@using BlazorWebAPP.AntDesignHelper
@using BlazorWebAPP.Models
@using Materal.ConvertHelper

@inherits LayoutComponentBase

@inject ExceptionManage _exceptionManage
@inject MessageManage _messageManage
@inject User.UserClient _userClient

<style>
    .m_nav_menu_layout_header {
        padding: 0;
        height: 50px;
        line-height: 50px;
        background: #fff;
        box-shadow: rgba(0, 0, 0, 0.08) 0 1px 4px 0;
    }

    .m_nav_menu_layout_main_menu {
        height: 100%;
        display: flex;
        justify-content: space-between;
    }

    .m_nav_menu_layout_btn_start {
        height: 100%;
        width: 64px;
        border: none;
    }

    .m_nav_menu_layout_goto_home {
        font-size: 16px;
        color: #000;
        width: 100%;
    }

    .m_nav_menu_layout_main_menu_user_info {
        width: 120px !important;
    }

    .m_nav_menu_layout_main_panel {
        padding: 30px 50px 0;
    }
</style>

<Layout Class="layout">
    <Header class="m_nav_menu_layout_header">
        <nav class="m_nav_menu_layout_main_menu">
            <Button class="m_nav_menu_layout_btn_start" @onclick="OpenMenuDrawer">
                <Icon Style="font-size:26px;" Type="appstore" />
            </Button>
            <NavLink class="m_nav_menu_layout_goto_home" href="" Match="NavLinkMatch.All">Materal.APP</NavLink>
            <Dropdown class="m_nav_menu_layout_main_menu_user_info">
                <ChildContent>
                    <a class="ant-dropdown-link">
                        @_userInfo.Name <Icon Type="down" />
                    </a>
                </ChildContent>
                <Overlay>
                    <Menu>
                        <MenuItem OnClick="OpenPersonalCenterDrawer">
                            个人中心
                        </MenuItem>
                        <MenuItem>
                            修改密码
                        </MenuItem>
                        <MenuItem RouterLink="/Login" RouterMatch="NavLinkMatch.All">
                            安全退出
                        </MenuItem>
                    </Menu>
                </Overlay>
            </Dropdown>
        </nav>
    </Header>
    <Content class="m_nav_menu_layout_main_panel">
        @Body
    </Content>
    <Footer Style="text-align: center;">copyright © 2020 Materal</Footer>
</Layout>
<Drawer Closable="false" class="m_nav_menu_layout_ant" Visible="_menuDrawerVisible" Placement="left" Width="300" OnClose="CloseMenuDrawer" BodyStyle="padding: 40px 0 0;">
    <Menu Mode=@MenuMode.Inline>
        <MenuItem RouterLink="/" RouterMatch="NavLinkMatch.All" OnClick="CloseMenuDrawer">主页</MenuItem>
        <MenuItem RouterLink="/UserList" RouterMatch="NavLinkMatch.All" OnClick="CloseMenuDrawer">用户管理</MenuItem>
        <MenuItem RouterLink="/ConfigCenter" RouterMatch="NavLinkMatch.All" OnClick="CloseMenuDrawer">配置中心</MenuItem>
        <MenuItem RouterLink="/ConDep" RouterMatch="NavLinkMatch.All" OnClick="CloseMenuDrawer">发布中心</MenuItem>
    </Menu>
</Drawer>
<Drawer Closable="true" Visible="_personalCenterDrawerVisible" Placement="right" Title='@("个人中心")' OnClose="ClosePersonalCenterDrawer" Width="400">
    <OperationUser @bind-UserData="@_userInfo" OnClose="ClosePersonalCenterDrawer" OnSuccess="SearchLoginUserInfo"></OperationUser>
</Drawer>

@code{
    private bool _menuDrawerVisible;
    private bool _personalCenterDrawerVisible;

    private UserInfoModel _userInfo = new UserInfoModel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await SearchLoginUserInfo();
        StateHasChanged();
        await base.OnAfterRenderAsync(true);
    }

    /// <summary>
    /// 打开抽屉
    /// </summary>
    private void OpenMenuDrawer()
    {
        _menuDrawerVisible = true;
    }
    /// <summary>
    /// 关闭抽屉
    /// </summary>
    private void CloseMenuDrawer()
    {
        _menuDrawerVisible = false;
    }
    /// <summary>
    /// 打开个人中心Drawer
    /// </summary>
    private void OpenPersonalCenterDrawer()
    {
        _personalCenterDrawerVisible = true;
    }
    /// <summary>
    /// 关闭个人中心Drawer
    /// </summary>
    private void ClosePersonalCenterDrawer()
    {
        _personalCenterDrawerVisible = false;
    }
    /// <summary>
    /// 查询登录用户信息
    /// </summary>
    /// <returns></returns>
    private async Task SearchLoginUserInfo()
    {
        try
        {
            UserInfoGrpcResultModel resultModel = await _userClient.GetMyUserInfoAsync(new Google.Protobuf.WellKnownTypes.Empty());
            if (resultModel.Status == 0)
            {
                _userInfo = resultModel.Data.CopyProperties<UserInfoModel>("ID");
                _userInfo.ID = Guid.Parse(resultModel.Data.ID);
            }
            else
            {
                _messageManage.Warning(resultModel.Message);
            }
        }
        catch (Exception exception)
        {
            _exceptionManage.HandlerException(exception);
        }
    }
}